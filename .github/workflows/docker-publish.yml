# .github/workflows/docker-publish.yml

# Nome do workflow que aparecerá no separador "Actions" do seu repositório
name: Build and Publish Docker Image to GHCR

# Define quando este workflow deve ser executado
on:
  # Executa sempre que houver um push para a branch 'main'
  push:
    branches:
      - main
  # Permite que execute este workflow manualmente a partir da interface do GitHub
  workflow_dispatch:

# Define as permissões necessárias para o job
permissions:
  contents: read
  packages: write

jobs:
  # Define um único job chamado 'build-and-push'
  build-and-push:
    # O tipo de máquina onde o job irá correr (Ubuntu mais recente)
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout do Código
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Configurar QEMU para emulação de múltiplas arquiteturas
      # Este passo é essencial para construir imagens para ARM em uma máquina AMD64.
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # 3. Configurar o Docker Buildx
      # Buildx é a ferramenta que permite a construção de imagens multi-plataforma.
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 4. Login no GitHub Container Registry (ghcr.io)
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 5. Extrair metadados da imagem (nome e tag)
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/clankjake/painel-plex

      # 6. Construir e Enviar a Imagem Docker Multi-Plataforma
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          # CORREÇÃO: Adicionada a flag 'platforms' para construir para AMD64 e ARM64.
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
